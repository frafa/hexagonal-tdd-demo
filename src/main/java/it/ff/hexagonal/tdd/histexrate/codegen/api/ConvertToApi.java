/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.ff.hexagonal.tdd.histexrate.codegen.api;

import java.math.BigDecimal;

import it.ff.hexagonal.tdd.histexrate.codegen.model.ConvertedAmount;

import java.time.LocalDate;

import it.ff.hexagonal.tdd.histexrate.codegen.model.ResponseError;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-10-09T22:05:16.885+02:00[Europe/Rome]")
@Validated
@Api(value = "convert-to", description = "the convert-to API")
public interface ConvertToApi {

    default ConvertToApiDelegate getDelegate() {
        return new ConvertToApiDelegate() {
        };
    }

    /**
     * GET /convert-to : Convert amount from base currency to another
     *
     * @param currencyFrom Currency (ISO 4217 code) you want to convert from. (required)
     * @param currencyTo   Destination currency (ISO 4217 code) you want to convert. (required)
     * @param amount       Amount to be converted (required)
     * @param date         Date (ISO format) used to retrieve historic exchange rate (optional)
     * @return Return the amount converted from base currency to another, all the eschange rate used will be returned. (status code 200)
     * or Bad request (status code 400)
     * or Not found (status code 404)
     * or Internal Server Error (status code 500)
     * or Service Unavailable (status code 503)
     */
    @ApiOperation(value = "Convert amount from base currency to another", nickname = "getConvertedAmount", notes = "", response = ConvertedAmount.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Return the amount converted from base currency to another, all the eschange rate used will be returned.", response = ConvertedAmount.class),
            @ApiResponse(code = 400, message = "Bad request", response = ResponseError.class),
            @ApiResponse(code = 404, message = "Not found", response = ResponseError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ResponseError.class),
            @ApiResponse(code = 503, message = "Service Unavailable", response = ResponseError.class)})
    @GetMapping(
            value = "/convert-to",
            produces = {"application/json"}
    )
    default ResponseEntity<ConvertedAmount> getConvertedAmount(@NotNull @ApiParam(value = "Currency (ISO 4217 code) you want to convert from.", required = true) @Valid @RequestParam(value = "currency_from", required = true) String currencyFrom, @NotNull @ApiParam(value = "Destination currency (ISO 4217 code) you want to convert.", required = true) @Valid @RequestParam(value = "currency_to", required = true) String currencyTo, @NotNull @ApiParam(value = "Amount to be converted", required = true) @Valid @RequestParam(value = "amount", required = true) BigDecimal amount, @ApiParam(value = "Date (ISO format) used to retrieve historic exchange rate") @Valid @RequestParam(value = "date", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate date) {
        return getDelegate().getConvertedAmount(currencyFrom, currencyTo, amount, date);
    }

}
