/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.ff.hexagonal.tdd.histexrate.codegen.api;

import io.swagger.annotations.*;
import it.ff.hexagonal.tdd.histexrate.codegen.model.ExchangeRate;
import it.ff.hexagonal.tdd.histexrate.codegen.model.HistoricRatesList;
import it.ff.hexagonal.tdd.histexrate.codegen.model.ResponseError;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.time.LocalDate;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-10-09T22:05:16.885+02:00[Europe/Rome]")
@Validated
@Api(value = "historic-rate", description = "the historic-rate API")
public interface HistoricRateApi {

    default HistoricRateApiDelegate getDelegate() {
        return new HistoricRateApiDelegate() {
        };
    }

    /**
     * DELETE /historic-rate : Delete an historical rate record
     *
     * @param currency Currency code (ISO 4217) of the exchange rate to delete. (optional)
     * @param date     Date (ISO format) of the exchange rate to delete. (optional)
     * @return Record delete. (status code 204)
     * or Bad request (status code 400)
     * or Not found (status code 404)
     * or Internal Server Error (status code 500)
     * or Service Unavailable (status code 503)
     */
    @ApiOperation(value = "Delete an historical rate record", nickname = "deleteExchangeRate", notes = "", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Record delete."),
            @ApiResponse(code = 400, message = "Bad request", response = ResponseError.class),
            @ApiResponse(code = 404, message = "Not found", response = ResponseError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ResponseError.class),
            @ApiResponse(code = 503, message = "Service Unavailable", response = ResponseError.class)})
    @DeleteMapping(
            value = "/historic-rate",
            produces = {"application/json"}
    )
    default ResponseEntity<Void> deleteExchangeRate(@ApiParam(value = "Currency code (ISO 4217) of the exchange rate to delete.") @Valid @RequestParam(value = "currency", required = false) String currency, @ApiParam(value = "Date (ISO format) of the exchange rate to delete.") @Valid @RequestParam(value = "date", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate date) {
        return getDelegate().deleteExchangeRate(currency, date);
    }


    /**
     * GET /historic-rate : Retrieve historic exchange rates.
     * Retrieve a list oh historic rate according to parameters. The number of elements returned depends on page and size parameter.
     *
     * @param currency currency code ISO 4217 to be retrieved (optional)
     * @param date     date to be retrieved (optional)
     * @param page     the page number to request. the page number is 0-based (default 0). (optional)
     * @param size     results per page the default is 10 (optional)
     * @return Return a list of historical exchange rates. (status code 200)
     * or Bad request (status code 400)
     * or Unauthorized (status code 401)
     * or Internal Server Error (status code 500)
     * or Service Unavailable (status code 503)
     */
    @ApiOperation(value = "Retrieve historic exchange rates.", nickname = "getHistoricRates", notes = "Retrieve a list oh historic rate according to parameters. The number of elements returned depends on page and size parameter.", response = HistoricRatesList.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Return a list of historical exchange rates.", response = HistoricRatesList.class),
            @ApiResponse(code = 400, message = "Bad request", response = ResponseError.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = ResponseError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ResponseError.class),
            @ApiResponse(code = 503, message = "Service Unavailable", response = ResponseError.class)})
    @GetMapping(
            value = "/historic-rate",
            produces = {"application/json"}
    )
    default ResponseEntity<HistoricRatesList> getHistoricRates(@ApiParam(value = "currency code ISO 4217 to be retrieved") @Valid @RequestParam(value = "currency", required = false) String currency, @ApiParam(value = "date to be retrieved") @Valid @RequestParam(value = "date", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate date, @ApiParam(value = "the page number to request. the page number is 0-based (default 0).") @Valid @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "results per page the default is 10") @Valid @RequestParam(value = "size", required = false) Integer size) {
        return getDelegate().getHistoricRates(currency, date, page, size);
    }


    /**
     * POST /historic-rate : Insert or update an historical rate.
     * Insert new historical rate record, if already exists a record with the same currency and date it will be update.
     *
     * @param exchangeRate the element to insert (required)
     * @return Successful response. (status code 201)
     * or Bad request (status code 400)
     * or Internal Server Error (status code 500)
     * or Service Unavailable (status code 503)
     */
    @ApiOperation(value = "Insert or update an historical rate.", nickname = "insertExchangeRate", notes = "Insert new historical rate record, if already exists a record with the same currency and date it will be update. ", response = ExchangeRate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Successful response.", response = ExchangeRate.class),
            @ApiResponse(code = 400, message = "Bad request", response = ResponseError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ResponseError.class),
            @ApiResponse(code = 503, message = "Service Unavailable", response = ResponseError.class)})
    @PostMapping(
            value = "/historic-rate",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<ExchangeRate> insertExchangeRate(@ApiParam(value = "The element to insert", required = true) @Valid @RequestBody ExchangeRate exchangeRate) {
        return getDelegate().insertExchangeRate(exchangeRate);
    }


    /**
     * PUT /historic-rate : Update an historical exchange rate
     * Update historical exchange rate record.
     *
     * @param exchangeRate the element to update (required)
     * @return Update successful. (status code 204)
     * or Bad request (status code 400)
     * or Not found (status code 404)
     * or Internal Server Error (status code 500)
     * or Service Unavailable (status code 503)
     */
    @ApiOperation(value = "Update an historical exchange rate", nickname = "updateExchangeRate", notes = "Update historical exchange rate record.", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Update successful."),
            @ApiResponse(code = 400, message = "Bad request", response = ResponseError.class),
            @ApiResponse(code = 404, message = "Not found", response = ResponseError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ResponseError.class),
            @ApiResponse(code = 503, message = "Service Unavailable", response = ResponseError.class)})
    @PutMapping(
            value = "/historic-rate",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Void> updateExchangeRate(@ApiParam(value = "The element to update", required = true) @Valid @RequestBody ExchangeRate exchangeRate) {
        return getDelegate().updateExchangeRate(exchangeRate);
    }

}
